package com.medihelp.presupuesto.domain;

import static com.medihelp.presupuesto.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class RecursoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecursoAllPropertiesEquals(Recurso expected, Recurso actual) {
        assertRecursoAutoGeneratedPropertiesEquals(expected, actual);
        assertRecursoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecursoAllUpdatablePropertiesEquals(Recurso expected, Recurso actual) {
        assertRecursoUpdatableFieldsEquals(expected, actual);
        assertRecursoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecursoAutoGeneratedPropertiesEquals(Recurso expected, Recurso actual) {
        assertThat(expected)
            .as("Verify Recurso auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecursoUpdatableFieldsEquals(Recurso expected, Recurso actual) {
        assertThat(expected)
            .as("Verify Recurso relevant properties")
            .satisfies(e -> assertThat(e.getMes()).as("check mes").isEqualTo(actual.getMes()))
            .satisfies(e -> assertThat(e.getValor()).as("check valor").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getValor()))
            .satisfies(e -> assertThat(e.getObservacion()).as("check observacion").isEqualTo(actual.getObservacion()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecursoUpdatableRelationshipsEquals(Recurso expected, Recurso actual) {
        assertThat(expected)
            .as("Verify Recurso relationships")
            .satisfies(e -> assertThat(e.getTipoRecurso()).as("check tipoRecurso").isEqualTo(actual.getTipoRecurso()))
            .satisfies(e -> assertThat(e.getPresupuesto()).as("check presupuesto").isEqualTo(actual.getPresupuesto()));
    }
}
